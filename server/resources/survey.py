#resouces/survey.py
import json
from flask_restful import Resource, reqparse
from models.survey import SurveyModel
import resources.parsers
from resources.parsers import check_status

##################################################################
# REST API for surveys
##################################################################
class Survey(Resource):
    #shows information about a survey by id
    def get(self, surveyname):
        survey = SurveyModel.find_survey_by_name(surveyname)
        if survey:
            return survey.tojsonwithreports(), 200 #ok
        return {'message': "Survey with name '{}' not found".format(surveyname)}, 404 #not found

    #post a new survey by its unique name
    def post(self, surveyname):
        if SurveyModel.find_survey_by_name(surveyname):
            return {'message': "A survey with the name '{}' already exists.".format(surveyname)}, 400 #bad request

        data = resources.parsers.ParseSurveysPost.parser.parse_args()

        if not check_status(data['status']):
            return {'message': "wrong status. must be 'created', 'active', or 'done'."}, 400 #bad request

        survey = SurveyModel(data['serviceprovider'],
                                data['serviceprovider'], # surveyid will be autogenerated in the model
                                surveyname,
                                data['status'],
                                data['comment'],
                                json.dumps(data['questions']))
        try:
            survey.save_to_db()
        except:
            return {'message': "Error while trying to save the survey."}, 500 #internal server error
        return survey.tojson(), 201 #created
        #return {'message': "A new survey was created and stored into the database"}, 201

    def put(self,surveyname):
        data = resources.parsers.ParseSurveysPut.parser.parse_args()
        survey = SurveyModel.find_survey_by_name(surveyname)

        if survey is None:
            return {'message': "Can not change status, survey '{}' does not exist".format(surveyname)}, 400 #bad request

        if not check_status(data['status']):
            return {'message': "wrong status. must be 'created', 'active', or 'done'."}, 400 #bad request

        if (survey.status == 'created' or survey.status == 'active') and (data['status'] == 'active' or data['status'] == 'done'):
            old_status = survey.status
            survey.status = data['status']
            survey.save_to_db()
            return {'message': "Status of survey '{}'  changed from '{}' to '{}' ".format(surveyname,old_status,survey.status)}, 200 #ok

        return {'message': "no changes"}, 200 #ok

    def delete(self,surveyname):
        survey = SurveyModel.find_survey_by_name(surveyname)
        if survey:
            try:
                survey.delete_from_db()
            except:
                return {'message': "Error while trying to delete the survey."}, 500 #internal server error

            return {'message': "Survey with name '{}' deleted.".format(surveyname)}, 202 #accepted
        return {'message': " No survey with this name."}, 400 #bad request


##################################################################
# Returns a list with all surveys in the datebase
##################################################################
class ListSurveys(Resource):
    def get(self):
        return {'surveys': [ x.tojson() for x in SurveyModel.query.all()]}


##################################################################
# Client Ressources (external ressources)
##################################################################

# check if there is a survey with status active, and give it to the client if yes
class AvailableSurveys(Resource):
    def get(self):
        return {'surveys': [ x.tojsonforclient() for x in SurveyModel.query.filter_by(status='active')]}




# allows to change the status of a survey in this order: created -> active -> done
# class SurveyStatus(Resource):
#     parser = reqparse.RequestParser()
#     parser.add_argument('status',
#         type=str,
#         required=True,
#         help="status is missing or not correct"
#     )
#
#     def put(self,surveyname):
#         data = SurveyStatus.parser.parse_args()
#         survey = SurveyModel.find_survey_by_name(surveyname)
#         if survey is None:
#             return {'message': "Can not change status, survey '{}' does not exist".format(surveyname)}, 400 #bad request
#
#         if (survey.status == 'created' or survey.status == 'active') and (data['status'] == 'active' or data['status'] == 'done'):
#             old_status = survey.status
#             survey.status = data['status']
#             survey.save_to_db()
#             return {'message': "Status of survey '{}'  changed from '{}' to '{}' ".format(surveyname,old_status,survey.status)}, 200 #ok
#
#         return {'message': "no changes"}, 200 #ok
